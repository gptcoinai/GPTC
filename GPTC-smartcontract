// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/*
 * GPTCoin (GPTC) — BEP-20 with hard cat & staged minting.
 * - Hard cap: 1,000,000,000 GPTC (18 decimals), deployed in mint()
 * - Staged mint: owner mint-а фази (token sale, liquidity, marketing & parthership, reserve, burn)
 * - Tax: 2% (1% burn -> DEAD, 1% ecosystem -> ecosystemWallet)
 * - Trading gate (enable/disable), fee & trading exemptions
 * - finalizeMinting(): turn of mining
 */

import "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/v4.9.6/contracts/token/ERC20/ERC20.sol";
import "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/v4.9.6/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/v4.9.6/contracts/token/ERC20/IERC20.sol";
import "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/v4.9.6/contracts/access/Ownable.sol";

contract GPTCoin is ERC20, ERC20Burnable, Ownable {
    // ---- Supply / Cap ----
    uint256 public constant MAX_SUPPLY = 1_000_000_000 * 1e18; // 1B GPTC
    bool    public mintingFinalized = false;

    // ---- Fees (basis points: 10_000 = 100%) ----
    uint256 public burnFeeBps      = 100; // 1%
    uint256 public ecosystemFeeBps = 100; // 1%
    uint256 public constant BPS_DEN = 10_000;
    uint256 public constant MAX_TOTAL_FEE_BPS = 500; // 5% лимит за безбедност

    address public ecosystemWallet; // маркетинг/партнерства/развој
    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;

    // ---- Controls ----
    bool public tradingEnabled = false;
    mapping(address => bool) public isFeeExempt;
    mapping(address => bool) public isTradingExempt;

    // ---- Events ----
    event FeesUpdated(uint256 burnBps, uint256 ecoBps);
    event EcosystemWalletUpdated(address indexed wallet);
    event TradingEnabled(bool enabled);
    event MintingFinalized();

    constructor(address _ecosystemWallet, address _owner)
        ERC20("GPTCoin", "GPTC")
        Ownable()
    {
        require(_ecosystemWallet != address(0), "ecosystem wallet required");
        require(_owner != address(0), "owner required");

        ecosystemWallet = _ecosystemWallet;

        // постави сопственик (OZ 4.9.6 нема конструктор со параметар)
        if (_owner != _msgSender()) {
            _transferOwnership(_owner);
        }

        // Default exemptions
        isFeeExempt[_owner] = true;
        isFeeExempt[address(this)] = true;
        isFeeExempt[_ecosystemWallet] = true;

        isTradingExempt[_owner] = true;
        isTradingExempt[address(this)] = true;
        isTradingExempt[_ecosystemWallet] = true;
    }

    // ----------------
    // Admin functions
    // ----------------

    function setEcosystemWallet(address wallet) external onlyOwner {
        require(wallet != address(0), "zero addr");
        ecosystemWallet = wallet;
        emit EcosystemWalletUpdated(wallet);
    }

    function setFees(uint256 _burnFeeBps, uint256 _ecoFeeBps) external onlyOwner {
        require(_burnFeeBps + _ecoFeeBps <= MAX_TOTAL_FEE_BPS, "fee > 5%");
        burnFeeBps = _burnFeeBps;
        ecosystemFeeBps = _ecoFeeBps;
        emit FeesUpdated(_burnFeeBps, _ecoFeeBps);
    }

    function setFeeExempt(address account, bool exempt) external onlyOwner {
        isFeeExempt[account] = exempt;
    }

    function setTradingExempt(address account, bool exempt) external onlyOwner {
        isTradingExempt[account] = exempt;
    }

    function enableTrading(bool enabled) external onlyOwner {
        tradingEnabled = enabled;
        emit TradingEnabled(enabled);
    }

    // ----------------
    // Minting (staged)
    // ----------------
    function mint(address to, uint256 amount) external onlyOwner {
        require(!mintingFinalized, "minting finalized");
        require(totalSupply() + amount <= MAX_SUPPLY, "exceeds max supply");
        _mint(to, amount);
    }

    function finalizeMinting() external onlyOwner {
        mintingFinalized = true;
        emit MintingFinalized();
    }

    // --------------------------------------
    // Fee logic + trading gate (override _transfer)
    // --------------------------------------
    function _transfer(address from, address to, uint256 amount) internal override {
        // allow owner/system actions пред launch
        if (!tradingEnabled) {
            require(isTradingExempt[from] || isTradingExempt[to], "trading disabled");
        }

        if (amount == 0 || isFeeExempt[from] || isFeeExempt[to]) {
            super._transfer(from, to, amount);
            return;
        }

        uint256 burnAmt = (amount * burnFeeBps) / BPS_DEN;
        uint256 ecoAmt  = (amount * ecosystemFeeBps) / BPS_DEN;
        uint256 sendAmt = amount - burnAmt - ecoAmt;

        if (burnAmt > 0) {
            super._transfer(from, DEAD, burnAmt);
        }
        if (ecoAmt > 0) {
            super._transfer(from, ecosystemWallet, ecoAmt);
        }

        super._transfer(from, to, sendAmt);
    }

    // -------------
    // Rescue tools
    // -------------
    function rescueERC20(address token, uint256 amount) external onlyOwner {
        IERC20(token).transfer(owner(), amount);
    }

    function rescueBNB(uint256 amount) external onlyOwner {
        payable(owner()).transfer(amount);
    }
}
